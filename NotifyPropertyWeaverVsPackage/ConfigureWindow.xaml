<Window x:Class="ConfigureWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Wpf="clr-namespace:Wpf"
        Title="Enable Notify Property Weaver for project" Height="370" Width="550" ResizeMode="NoResize" ShowInTaskbar="False">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Styles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <Wpf:InverseBooleanConverter x:Key="InverseBooleanConverter" />
            <Wpf:EnumBooleanConverter x:Key="enumBooleanConverter" />
        </ResourceDictionary>
    </Window.Resources>
    <StackPanel>
        <TabControl Height="300">
            <TabItem Header="Tools Directories">

                <StackPanel>
                    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap">
                        This is the location where the assembly containing the WeavingTask (NotifyPropertyWeaverMsBuildTask.dll) is stored.<LineBreak/> 
                        The recommended approach is to prefix the location with "$(SolutionDir)" and hence make it relative to the solution directory.<LineBreak/> 
                        The environment variables "$(SolutionDir)" and "$(ProjectDir)" are allowed.
                    </TextBlock>
                    <StackPanel Orientation="Horizontal" Width="Auto" HorizontalAlignment="Stretch">
                        <TextBlock>Tools directory:</TextBlock>
                        <TextBox Grid.Column="1" 
                 Text="{Binding Path=ToolsDirectory, UpdateSourceTrigger=PropertyChanged}" ToolTip="The directory to store the build task 'NotifyPropertyWeaverMsBuildTask.dll'." Width="301" />
                        <Button Content="Default" Click="SetDefaultToolsDirectory"  />
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem Header="Attribute Assembly">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock Grid.ColumnSpan="2" HorizontalAlignment="Left" TextWrapping="Wrap">
                        If you need more fine grained control of how weaving occurs then you can add a reference to the attribute assembly "NotifyPropertyWeaver.dll".<LineBreak/> 
                        The recommended approach is to prefix the location with "$(SolutionDir)" and hence make it relative to the solution directory.<LineBreak/> 
                        The environment variables "$(SolutionDir)" and "$(ProjectDir)" are allowed.
                    </TextBlock>
                    <TextBlock Grid.Row="1">IncludeAttributeAssembly:</TextBlock>
                    <CheckBox Grid.Column="1"  
                  IsChecked="{Binding Path=IncludeAttributeAssembly, UpdateSourceTrigger=PropertyChanged}" Grid.Row="1" ToolTip="Check this if you want to reference attribute assembly." />
                    <TextBlock Grid.Row="2">Attribute assembly directory:</TextBlock>
                    <TextBox Grid.Column="1" Text="{Binding Path=DependenciesDirectory, UpdateSourceTrigger=PropertyChanged}" Grid.Row="2" 
                 IsEnabled="{Binding Path=IncludeAttributeAssembly, UpdateSourceTrigger=PropertyChanged}" ToolTip="The directory to store the attribute assembly." />
                    <WrapPanel  Grid.Row="3" Grid.Column="1">
                        <Button Content="Default" IsEnabled="{Binding Path=IncludeAttributeAssembly}" Click="SetDefaultDependenciesDirectory" />
                        <Button Click="SetSameAsToolsDirectory"
                 IsEnabled="{Binding Path=IncludeAttributeAssembly}" Content="Same as Tools Directory"/>
                    </WrapPanel>
                    <!--<StackPanel Grid.Row="4" Grid.ColumnSpan="2" Orientation="Horizontal">
                        <Button  Click="LaunchResultantToolsPath" Style="{StaticResource LinkButton}" Content="{Binding Path=ResultantAttributePath}"/>
                        <TextBlock>NotifyPropertyWeaver.dll</TextBlock>
                    </StackPanel>-->
                </Grid>
            </TabItem>
            <TabItem Header="Target Node">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <TextBlock Grid.ColumnSpan="2" HorizontalAlignment="Left" TextWrapping="Wrap">
                       This is the target node in the project file where the build task will be injected.<LineBreak/> 
                       The default, and recommended, location is "AfterCompile".
                    </TextBlock>
                    <TextBlock Grid.Row="2">Target Node:</TextBlock>
                    <TextBox Grid.Column="1" Width="150" HorizontalAlignment="Left"
                             Text="{Binding Path=TargetNode, UpdateSourceTrigger=PropertyChanged}"  
                             Grid.Row="2" ToolTip="The node to be injected into." />
                </Grid>
            </TabItem>
            <TabItem Header="AssemblyPath">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock Grid.ColumnSpan="2" HorizontalAlignment="Left" TextWrapping="Wrap">
                       This is the target assembly to be processed.<LineBreak/> 
                       Since the task is places in the AfterCompile Task it is effectivly the path to<LineBreak/> 
                        "obj\Debug\AssmblyName.dll".<LineBreak/> 
                       If you choose to derive this field the variable will be extracted from the build engine.
                    </TextBlock>
                    <TextBlock Grid.Row="1">Derive from BuildEngine:</TextBlock>
                    <CheckBox Grid.Column="1"  
                  IsChecked="{Binding Path=DeriveTargetPathFromBuildEngine, UpdateSourceTrigger=PropertyChanged}" Grid.Row="1" ToolTip="Check this if you want to let the WeavingTask derive the TargetPath." />

                    <TextBlock Grid.Row="2">Target Path:</TextBlock>
                    <TextBox Grid.Column="1" 
                             Text="{Binding Path=TargetPath, UpdateSourceTrigger=PropertyChanged}"  
                             IsEnabled="{Binding Path=DeriveTargetPathFromBuildEngine, Converter={StaticResource InverseBooleanConverter}}" 
                             Grid.Row="2" ToolTip="The path to the assembly to be weaved." />
                    <!--<Button Grid.Row="3" Grid.Column="1" Content="Default" IsEnabled="{Binding Path=DeriveTargetPathFromBuildEngine, Converter={StaticResource InverseBooleanConverter}}" Click="SetDefaultTargetPath" HorizontalAlignment="Left" Width="67" />-->
                </Grid>
            </TabItem>
            <TabItem Header="Behaviour">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Row="1" >EventInvokerName:</TextBlock>
                    <TextBox Grid.Row="1" Grid.Column="1" 
                 Text="{Binding Path=EventInvokerName, UpdateSourceTrigger=PropertyChanged}" ToolTip="The name of the method that fires the notify event. " />
                    <WrapPanel Grid.Row="2" Grid.Column="1">
                        <Button Click="SetDefaultInvoker">Default</Button>
                    </WrapPanel>
                    <TextBlock TextWrapping="Wrap" Grid.Row="3" HorizontalAlignment="Left" Grid.Column="1">Caliburn, CaliburnMicro, MVVMLight, Cinch and Prism supported out of the box. Just leave EventInvokerName as default.</TextBlock>
                    <TextBlock Grid.Row="4" >TryToWeaveAllTypes:</TextBlock>
                    <CheckBox Grid.Row="4" Grid.Column="1"  
                  IsChecked="{Binding Path=TryToWeaveAllTypes, UpdateSourceTrigger=PropertyChanged}" ToolTip="Try to weave all properties for all types that implement INotifyPropertyChanged." />

                    <TextBlock Grid.Row="5" >CheckForEquality:</TextBlock>
                    <CheckBox Grid.Row="5" Grid.Column="1"  
                  IsChecked="{Binding Path=CheckForEquality, UpdateSourceTrigger=PropertyChanged}" ToolTip="Control if an equality check is performed before doing a property set and notification. " />

                    <TextBlock VerticalAlignment="Top" Grid.Row="6" >MessageImportance:</TextBlock>
                    <StackPanel Grid.Row="6" Grid.Column="1"  >
                        <RadioButton IsChecked="{Binding Path=MessageImportance, Converter={StaticResource enumBooleanConverter}, ConverterParameter=High}">High</RadioButton>
                        <RadioButton IsChecked="{Binding Path=MessageImportance, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Normal}">Normal</RadioButton>
                        <RadioButton IsChecked="{Binding Path=MessageImportance, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Low}">Low</RadioButton>
                    </StackPanel>

                    <TextBlock Grid.Row="7" >CheckForIsChanged:</TextBlock>
                    <CheckBox Grid.Row="7" Grid.Column="1"  
                  IsChecked="{Binding Path=CheckForIsChanged, UpdateSourceTrigger=PropertyChanged}" ToolTip="Control if the IsChanged property weaving occurs." />
                    <TextBlock Grid.Row="8" >ProcessFields:</TextBlock>
                    <CheckBox Grid.Row="8" Grid.Column="1"  
                  IsChecked="{Binding Path=ProcessFields, UpdateSourceTrigger=PropertyChanged}" ToolTip="Control if fields are converted to properties." />

                </Grid>
            </TabItem>
            <TabItem Header="MoreInfo" >
                <StackPanel HorizontalAlignment="Left">
                    <RichTextBox IsDocumentEnabled="True"  HorizontalAlignment="Left" BorderThickness="0" Background="Transparent" IsReadOnly="True" >
                        <FlowDocument>
                            <Paragraph>
                                Home Page:
                                <Wpf:HyperlinkEx NavigateUri="https://github.com/SimonCropp/NotifyPropertyWeaver/">https://github.com/SimonCropp/NotifyPropertyWeaver/</Wpf:HyperlinkEx>                            
                                
                            </Paragraph>
                        </FlowDocument>
                    </RichTextBox>
                    <WrapPanel>
                    <TextBlock>Version:</TextBlock>
                        <Label Content="{Binding Path=Version}"></Label>
                    </WrapPanel>
                </StackPanel>
            </TabItem>
        </TabControl>
        <StackPanel Orientation="Horizontal" Grid.Row="10" VerticalAlignment="Bottom" Grid.ColumnSpan="2" FlowDirection="RightToLeft">
            <Button Click="Cancel" IsCancel="True">Cancel</Button>
            <Button Click="Ok" IsDefault="True">Ok</Button>
        </StackPanel>
    </StackPanel>
</Window>
